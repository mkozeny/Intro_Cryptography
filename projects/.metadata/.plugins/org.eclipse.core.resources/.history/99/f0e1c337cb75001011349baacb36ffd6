package main;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;

import rsa.RSAEncryptUtil;

public class Main {

	/**
	 * @param args
	 * @throws Exception
	 * 
	 */
	private static PublicKey publicKey;

	private static PrivateKey privateKey;

	private static DataInputStream input;

	private static DataOutputStream output;

	private final static String publicKeyFileName = "/home/kozenym/Desktop/pubKey.txt";

	private final static String privateKeyFileName = "/home/kozenym/Desktop/privKey.txt";
	
	

	public static void main(String[] args) throws Exception {
		doCommunication();
	}

	public static void doCommunication() throws Exception {

		Socket socket = null;
		input = null;
		output = null;
		try {
			socket = new Socket("localhost", 16789);
			input = new DataInputStream(socket.getInputStream());
			output = new DataOutputStream(socket.getOutputStream());
		} catch (UnknownHostException e) {
			System.out.println("No server found on the specified host.");
			System.exit(1);
		} catch (IOException e) {
			System.err.println("No server is listening on the specified port.");
			System.exit(1);
		}

		// get filename to send if this is a send

		sendFile("/home/kozenym/Desktop/key.txt", input, output);

	}

	private static byte[] getBytesFromFile(File file) throws IOException {
		InputStream is = new FileInputStream(file);

		// Get the size of the file
		long length = file.length();

		// You cannot create an array using a long type.
		// It needs to be an int type.
		// Before converting to an int type, check
		// to ensure that file is not larger than Integer.MAX_VALUE.
		if (length > Integer.MAX_VALUE) {
			// File is too large
		}

		// Create the byte array to hold the data
		byte[] bytes = new byte[(int) length];

		// Read in the bytes
		int offset = 0;
		int numRead = 0;
		while (offset < bytes.length
				&& (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
			offset += numRead;
		}

		// Ensure all the bytes have been read in
		if (offset < bytes.length) {
			throw new IOException("Could not completely read file "
					+ file.getName());
		}

		// Close the input stream and return bytes
		is.close();
		return bytes;
	}

	private static void generateKey() throws NoSuchAlgorithmException,
			NoSuchProviderException, FileNotFoundException, IOException {
		KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
		SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
		keyGen.initialize(1024, random);
		KeyPair pair = keyGen.generateKeyPair();
		PrivateKey priv = pair.getPrivate();
		PublicKey pub = pair.getPublic();

		ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(
				publicKeyFileName));
		oos.writeObject(pub);
		oos.close();

		oos = new ObjectOutputStream(new FileOutputStream(privateKeyFileName));
		oos.writeObject(priv);
		oos.close();
	}

	private static void getKeys() throws FileNotFoundException, IOException,
			ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream(
				publicKeyFileName));
		publicKey = (PublicKey) ois.readObject();
		ois.close();

		ois = new ObjectInputStream(new FileInputStream(privateKeyFileName));
		privateKey = (PrivateKey) ois.readObject();
		ois.close();
	}

	static private void sendFile(String send, DataInputStream input,
			DataOutputStream output) {

		String ack = null;
		//String hash = "74832huhr32ry92";// response from server (ACK/NACK)
		String hash = "";
		String encryptedHash = null;
		System.out.println("Preparing to transfer file " + send + "...");

		try {
			output.writeUTF("username"); // SEND command,
			System.out.println("Username sent");

			ack = input.readUTF(); // get server response
			if (!ack.equals("ACK")) {
				System.out
						.println("Server didn't acknowledge username.  Aborted.");
			} else
				System.out.println("ACK received");

			File file = new File(send);
			DataInputStream filestream = new DataInputStream(
					new FileInputStream(file));
			byte [] fileContent = getBytesFromFile(file);
			int togo = fileContent.length;

			output.writeUTF(file.getName()); // SEND command,
			System.out.println("Filename sent");
			// output.writeUTF(send); // ...filename to server

			ack = input.readUTF(); // get server response
			if (!ack.equals("ACK"))
				System.out
						.println("Server didn't acknowledge filename.  Aborted.");

			else
				System.out.println("ACK received");

			// push length of file to server
			output.writeInt(togo);
			System.out.println("Size of file: " + togo + " sent");

			ack = input.readUTF(); // get server response
			if (!ack.equals("ACK"))
				System.out
						.println("Server didn't acknowledge file size.  Aborted.");

			else
				System.out.println("ACK received");
			// transfer file contents

			sendInChunks(filestream, output, togo, 1024);
			filestream.close();
			System.out.println("File content sent");

			// is the server happy with the transfer?

			ack = input.readUTF();
			if (!ack.equals("ACK"))
				System.out.println("Server failed to store the file.");
			else
				System.out.println("ACK received");

			getKeys();
			encryptedHash = RSAEncryptUtil.encrypt(hash, privateKey);
			output.writeUTF(encryptedHash);
			System.out.println("Encrypted hash: " + encryptedHash + " sent");

			ack = input.readUTF();
			if (!ack.equals("ACK"))
				System.out.println("Failed to send hash.");
			else
				System.out.println("ACK received");

			// }
		} catch (Exception e) {
			System.out.println("Server failed to store the file.");
		}
	}

	static public void sendInChunks(DataInputStream input,
			DataOutputStream output, int togo, int chunksize)
			throws IOException {

		// copy bytes from input to output in chunksize-sized chunks

		byte bytes[] = new byte[chunksize];
		int writecount;
		while (togo > 0) {
			writecount = (togo >= chunksize ? chunksize : togo);
			input.read(bytes, 0, writecount);
			output.write(bytes, 0, writecount);
			togo = togo - writecount;
		}

		output.flush();
	}
	


}
