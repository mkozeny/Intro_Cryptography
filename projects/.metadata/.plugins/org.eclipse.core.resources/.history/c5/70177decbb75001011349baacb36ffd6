package hash;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.util.Arrays;


public class Main {

	/**
	 * @param args
	 * @throws IOException 
	 */
	
	private static final int HASHLENGTH = 30;
	private static final String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        + "abcdefghijklmnopqrstuvwxyz" + "0123456789" + "+/";
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		File sendingFile = new File("/home/kozenym/Desktop/hash-files/Main.java");
		byte[] byteArray = getBytesFromFile(sendingFile);
		String hash = computeHash(byteArray, sendingFile.getName().getBytes("UTF-8"));
		
		System.out.println("hash is: "+hash);
		parseString("AhojAhoj".getBytes());
		
//		System.out.println(calculateHash(("Could not campletely read fila hCould not campletely read fila" +
//				" hCould not campletely read fila hCould not campletely read fila hCould not campletely read" +
//				" fila hCould not campletely read fila hCould not campletely read fila hCould not campletely read fila h").getBytes()));
	}
	
	private static String computeHash(byte[] fileBytes, byte[] fileName){
		
		byte [] hashInput = concatenateByteArrays(fileBytes, fileName);
//		int constant = fileBytes.length / HASHLENGTH;
		int constant = hashInput.length / HASHLENGTH;
		
		
		
		StringBuffer sb = new StringBuffer(HASHLENGTH);
		int znak = 0;
		for (int i=0; i<HASHLENGTH; i++){
			znak += hashInput[i*constant];
			for (int j=0; j<constant; j++){
				znak = ( znak + hashInput[i*constant + j] ) % ALPHABET.length();
				//znak = ( znak + fileBytes[i*constant + j] ) % 250;
			}	
			znak = znak  % ALPHABET.length();
			sb.append(ALPHABET.charAt(znak));
			//sb.append((char) znak);
		}
		/*for (int i=HASHLENGTH -1; i<HASHLENGTH; i++){
			znak += fileBytes[i*constant];
			for (int j=0; j<constant; j++){
				znak = ( znak + fileBytes[i*constant + j] ) % ALPHABET.length();
				//znak = ( znak + fileBytes[i*constant + j] ) % 250;
			}	
			
			sb.append(ALPHABET.charAt(znak));
			//sb.append((char) znak);
		}*/
		//System.out.println(sb.toString());
		//String encoded = Base64.encode(sb.toString());
		//System.out.println("length of hash "+sb.length());
		//System.out.println("length of encoded hash "+encoded.length());
		return sb.toString();
		
	}
	
	private static byte [] concatenateByteArrays(byte [] fileBytes,byte [] fileName)
	{
		byte [] fileLengthBytes = ((Integer)fileBytes.length).toString().getBytes();
		int fileLength = fileLengthBytes.length;
		
		byte [] result = new byte [fileBytes.length+fileName.length+fileLength];
		result =  copyByteArray(fileBytes,fileName);
		result =  copyByteArray(result,fileLengthBytes);
		return result;

	}
	/*private <T> void concat(T [] A, T [] B) {
		   T [] C= new T [A.length+B.length];
		   System.arraycopy(A, 0, C, 0, A.length);
		   System.arraycopy(B, 0, C, A.length, B.length);

		   //return C;
		}*/
	/*private static final <T> T[] copy(T[] s1, T[] s2) {
			Class type = s1.getClass().getComponentType();
			T [] target= (T[])Array.newInstance(type, s1.length+s2.length);   
			//Class type = source.getClass().getComponentType();
		   //T[] target = (T[])Array.newInstance(type, source.length);
		   System.arraycopy(s1, 0, target, 0, s1.length);
		   System.arraycopy(s2, 0, target, s1.length, s2.length);
		   return target;
	}*/
	
	private static final byte [] copyByteArray(byte [] s1,  byte[] s2) {
		byte [] target= new byte [s1.length+s2.length];   
		//Class type = source.getClass().getComponentType();
	   //T[] target = (T[])Array.newInstance(type, source.length);
	   System.arraycopy(s1, 0, target, 0, s1.length);
	   System.arraycopy(s2, 0, target, s1.length, s2.length);
	   return target;
}


	/*private static String evenUpMessage(StringBuffer message)
	{
		int length = message.length();
		String lengthStr = String.valueOf(length);
		int difference = HASHLENGTH - length;
		String s = "";
		for (int i=0; i<difference; i++){
			s += "0";
		}
		message.append(s);
		int znak = 0;
		for (int i=message.length()-1; i>=(length-lengthStr.length()); i++){
			znak = message.charAt(i);
			znak = (znak + lengthStr.charAt(i-(length-lengthStr.length()))) % ALPHABET.length();
			message.setCharAt(i, (char) znak);
			}	
			
			sb.append(ALPHABET.charAt(znak));
			//sb.append((char) znak);
		}
		return message.toString();
	}*/
	
	private static byte[] getBytesFromFile(File file) throws IOException {
	    InputStream is = new FileInputStream(file);

	    // Get the size of the file
	    long length = file.length();

	    // You cannot create an array using a long type.
	    // It needs to be an int type.
	    // Before converting to an int type, check
	    // to ensure that file is not larger than Integer.MAX_VALUE.
	    if (length > Integer.MAX_VALUE) {
	        // File is too large
	    }

	    // Create the byte array to hold the data
	    byte[] bytes = new byte[(int)length];

	    // Read in the bytes
	    int offset = 0;
	    int numRead = 0;
	    while (offset < bytes.length
	           && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
	        offset += numRead;
	    }

	    // Ensure all the bytes have been read in
	    if (offset < bytes.length) {
	        throw new IOException("Could not completely read file "+file.getName());
	    }

	    // Close the input stream and return bytes
	    is.close();
	    return bytes;
	}
	
	private static boolean [] getBits(byte b)
	//private static String getBits(byte b)
	{
		//int i = Integer.parseInt(hex,16);
	    String binary = Integer.toBinaryString((int)b);
	    int binaryLength = binary.length();
	    boolean [] result = new boolean [8];
		for(int i = 0; i < 8; i++)
		{
			if(i<binaryLength)
				result[(8-binaryLength)+i] = (binary.charAt(i)=='1');
		
		}
	    return result;
	}
	
	private static byte getByte(boolean [] array)
	//private static String getBits(byte b)
	{
		//int i = Integer.parseInt(hex,16);
		reverse(array);
		int sum = 0;
		for(int i = 0; i < 8; i++)
		{
			if(array[i])
				sum += Math.pow(2.0, i);
		
		}
	    return (byte)sum;
	}
	
	private static void reverse(boolean[] p) {
		  int left  = 0;          
		  int right = p.length-1; 
		  
		  while (left < right) {
		     boolean temp = p[left]; 
		     p[left]  = p[right]; 
		     p[right] = temp;
		     left++;
		     right--;
		  }
	}
	
	private static boolean [] [] parseString(byte [] input)
	{
		boolean [][] binaryString = new boolean [input.length][8];
		for(int i = 0; i < input.length; i++)
		{
			copyArray(binaryString, getBits(input[i]), i);
		}
		return binaryString;
	}
	
	private static void copyArray(boolean [][] binaryString, boolean [] input, int row)
	{
		for(int i = 0; i < input.length; i++)
		{
			binaryString[row][i] = input[i];
		}
	}
	
	private static void copyTwoDimArrayToOneDimArray(boolean [][] binaryString, boolean [] input, int row)
	{
		for(int i = 0; i < input.length; i++)
		{
			 input[i] = binaryString[row][i];
		}
	}
	
	private static boolean [][] reduceBytes(boolean [] [] binaryString)
	{
		int length = binaryString.length/2;
		boolean [][] result = new boolean [length] [8]; 
		for(int i = 0; i < length; i++)
		{
			for(int j = 0; j < 8; j++)
			{
				result [i][j] = xorBits(binaryString [2*i][j],binaryString [2*i+1][j]);
			}
		}
		if(result.length > 16)
			return reduceBytes(result);
		return result;
	}
	
	private static boolean xorBits(boolean a, boolean b)
	{
		return a!=b;
	}
	
	private static String calculateHash(byte [] input)
	{
		boolean [] [] matrix = parseString(input);
		matrix = reduceBytes(matrix);
		//byte [] result = new byte [matrix.length];
		StringBuffer s = new StringBuffer();
		for(int i = 0 ; i < matrix.length; i++)
		{
			boolean [] row = new boolean[8];
			copyTwoDimArrayToOneDimArray(matrix, row, i);
			s.append(ALPHABET.charAt(((int)getByte(row))% ALPHABET.length()));
		}
		return s.toString();
	}
}
