package main;




public class Field {

	//private int[] moduloPolynom={1,0,0,0,1,1,0,1,1};
	private int[] moduloPolynom={1,1,0,1,1,0,0,0,1};
	
	public int[] addPolynoms(int [] p1, int [] p2)
	{
		int length = p1.length>p2.length?p1.length:p2.length;
		int [] result = new int[length];
		for(int i = 0; i < length; i++)
		{
			if(i <= p1.length-1 && i <= p2.length-1 && p1[i]!=p2[i])
				result[i]=1;
			else if(i > p1.length-1)
				result[i]=p2[i];
			else if(i > p2.length-1)
				result[i]=p1[i];
		}
		return result;
	}
	public int[] multiplyPolynoms(int [] p1, int [] p2)
	{
		//reverse(p1);
		//reverse(p2);
		int [] result = new int[p1.length+p2.length];
		int power=0;
		for(int i = 0; i < p1.length; i++)
		{
			for(int j = 0; j < p2.length ; j++)
			{
				if(p1[i]==1 && p2[j]==1)
				{
					power = i+j;
					if(result[power]==1)
						result[power]=0;
					else if(result[power]==0)
						result[power]=1;
				}
			}
		}
		//reverse(result);
		//reverse(this.moduloPolynom);
		DividingResult dividingResult = dividePolynoms(result, this.moduloPolynom);
		result = dividingResult.getRemainder();
		//reverse(this.moduloPolynom);
		reverse(p1);
		reverse(p2);
		return result;
	}
	public DividingResult dividePolynoms(int [] p1, int [] p2)
	{
		//reverse(p1);
		//reverse(p2);
		int [] p =copyPolynom(p1);
		int [] result = new int[p1.length+p2.length];
		int [] helpPol = null;
		int power=0;
		int i=0;
		int j=0;
		
		i=theMostSignificantOccupiedPosition(p);
		j=theMostSignificantOccupiedPosition(p2);
		while(i>=j)
		{
			helpPol = new int[p1.length+p2.length];
			power = i-j;
			result[power]=1;
			for(int k = 0; k < p2.length; k++)
			{
				if(p2[k]==1)
					helpPol[k+power]=1;
			}
			p=addPolynoms(p, helpPol);
			i=theMostSignificantOccupiedPosition(p);
			j=theMostSignificantOccupiedPosition(p2);
		}
		reverse(p1);
		reverse(p2);
		//reverse(p);
		//reverse(result);
		return new DividingResult(result, p);
	}
	public Equation doExtendedEucleid(int [] p1, int [] p2)
	{
		int [] k={1,0,0,0,0,0,0,0};
		int [] leftOperand;
		int [] l={1,0,0,0,0,0,0,0};
		int [] rightOperand;
		int [] remainder;
		DividingResult dividingResult;
		Field field = new Field();
		reverse(p1);
		reverse(p2);
		
		rightOperand=p1;
		leftOperand=p2;
		dividingResult = field.dividePolynoms(p1, p2);
		k=dividingResult.getResult();
		remainder=dividingResult.getRemainder();
		
		
		
		Equation eq1 = new Equation(k,leftOperand,l,rightOperand,remainder,leftOperand);
		/*if remainder of first equation is zero, you have to return this equation and GCD is then leftOperand*/
		if(isPolynomZero(eq1.getRemainder()))
			return eq1;
		
		dividingResult = field.dividePolynoms(eq1.getLeftOperand(), eq1.getRemainder());
		remainder=dividingResult.getRemainder();
		leftOperand=eq1.getLeftOperand();
		rightOperand=eq1.getRemainder();
		dividingResult = field.dividePolynoms(leftOperand, rightOperand);
		l=dividingResult.getResult();
		k=new int[8];//tady musi byt 1!!
		k[0]=1;
		
		k=field.addPolynoms(k, field.multiplyPolynoms(l, eq1.getK()));
		l=field.multiplyPolynoms(l, eq1.getL());
		
		
		
		Equation eq2 = new Equation(k,leftOperand,l,eq1.getRightOperand(),remainder, eq1.getRemainder());
		/*else if remainder of second equation is zero, you have to return first equation and GCD is then remainder*/
		if(isPolynomZero(eq2.getRemainder()))
			return eq1;
		return doEuclideanRecursively(eq1, eq2);
	}
	public static Equation doEuclideanRecursively(Equation eq1, Equation eq2)
	{
		Field field = new Field();
		DividingResult dividingResult = field.dividePolynoms(eq2.getLeftOperand(), eq2.getRemainder());
		int [] remainder=dividingResult.getRemainder();
		int [] leftOperand=eq2.getRightOperandPrev();
		int [] rightOperand=eq2.getRemainder();
		int [] l=dividingResult.getResult();
		int [] k={0,0,0,0,0,0,0,1};
		k=field.addPolynoms(field.multiplyPolynoms(k, eq1.getK()), field.multiplyPolynoms(l, eq2.getK()));
		//k=k*eq1.getK()+l*eq2.getK();
		int [] identifyPol = {0,0,0,0,0,0,0,1};
		l=field.addPolynoms(field.multiplyPolynoms(identifyPol, eq1.getL()), field.multiplyPolynoms(l, eq2.getL()));
		//l=1*eq1.getL()+l*eq2.getL();
		leftOperand=eq1.getLeftOperand();
		rightOperand=eq1.getRightOperand();
		
		Equation actual = new Equation(k, leftOperand, l, rightOperand, remainder, eq2.getRemainder());
		eq1=eq2;
		eq2=actual;
		if(isPolynomZero(remainder))
			return doEuclideanRecursively(eq1, eq2);
		return eq1;
	}
	public static boolean isPolynomZero(int [] p)
	{
		for(int i = 0; i < p.length; i++)
		{
			  if(p[i]!=0)
				  return false;
		}
		return true;
	}
	public static int theMostSignificantOccupiedPosition(int[] p)
	{
		int position=0;
		for(int i = p.length-1; i >= 0; i--)
		{
			if(p[i]==1)
			{
			  position=i;
			  break;
			}
		}
		return position;
	}
	public static int[] copyPolynom(int[] p) {
		  int polynom[] = new int[p.length];          
		  for(int i = 0; i < p.length; i++)
			  polynom[i]=p[i];
		  return polynom;
	}
	public static void reverse(int[] p) {
		  int left  = 0;          
		  int right = p.length-1; 
		  
		  while (left < right) {
		     int temp = p[left]; 
		     p[left]  = p[right]; 
		     p[right] = temp;
		     left++;
		     right--;
		  }
	}
	public int[] getModuloPolynom() {
		return moduloPolynom;
	}
	
}
