package main;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.security.PrivateKey;
import java.security.PublicKey;

import rsa.RSAEncryptUtil;

public class MessageRequest implements Runnable {

	private final static String CRLF = "\r\n";
	
	private static InputStream in;
	
	private Socket socket;
	
	private static PublicKey publicKey;
	

	private final static String publicKeyFileName = "/home/kozenym/Desktop/pubKey.txt";
	
	public MessageRequest(Socket socket) {
		this.socket = socket;
	}
	//----------------------------------------

	@Override
	public void run() {
		
		//just calls processRequest()		
		try
		{
			processRequest();
		}
		catch (Exception e) {
			System.out.println(e.toString());
		}
	}

	private void processRequest() throws Exception
	{
		//reserving resources
		//allocating in and out buffers and mapping them tcp socket
		
		in = socket.getInputStream();
		BufferedReader inFromClient;
		
		DataOutputStream outToClient;
		
		inFromClient = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		outToClient = new DataOutputStream(socket.getOutputStream());
		
		//get filename
		String fileName = inFromClient.readLine();
		
		//sending ACK
		outToClient.writeBytes("ACK\r\n");
		
		//receiving file content
		
		//FileOutputStream fos = new FileOutputStream(fileName);
		byte [] buffer = new byte[1024];
		int read=0;
        while((read=in.read(buffer))!= -1){
     	  fos.write(buffer, 0, read);
     	  
     	}
		/*int read=0;
		
		
        while((read=in.read(buffer)) != -1 ){
          
     	  fos.write(buffer, 0, read);
     	 	// read=in.read(buffer);
     	 //in.read(buffer, 0, read);
     	 	
     	
     	}
		char [] buffer = new char [1024];
		int read = 0;
		while((read=inFromClient.read(buffer))!= -1){
	    	  fos.write((new String(buffer)).getBytes(), 0, read);
	    }*/
		
        //sending ACK
		outToClient.writeBytes("ACK\r\n");
		
		//get encryptedHash
		String encryptedHash = inFromClient.readLine();
		getKey();
		String hash = RSAEncryptUtil.decrypt(encryptedHash, publicKey);
		System.out.println("Received hash: "+hash);
		
		//sending ACK
		outToClient.writeBytes("ACK\r\n");
		
		/*BufferedReader inFromClient =new BufferedReader(new InputStreamReader(socket.getInputStream()));
		DataOutputStream outToClient = new DataOutputStream(socket.getOutputStream());
		
		//reading line from socket with usage of buffer
		String requestLine = inFromClient.readLine();
		
		//parsing the incoming line into tokens, this just makes the work with string easy
		StringTokenizer tokens = new StringTokenizer(requestLine);
		
		//skipping the first token in request
		//the app works only with GET, we just suppose that here is "GET" in that token 
		tokens.nextToken();
		
		//retrieving name of the file the browser requested		
		String fileName = tokens.nextToken();	
		
		fileName = "." + fileName;		
		
		//creating file buffer, so that we can send the file into socket
		//but first we have to decide whether the file exists (we will send it)
		//or not (we will send file-not-found message)
		FileInputStream fis = null;
		boolean fileExists = true;
		try	{
			fis = new FileInputStream(fileName);			
		}
		catch (FileNotFoundException e) {
			fileExists = false;
		}
		
		//initializing the lines, which will be send
		String statusLine = null;
		String contentTypeLine = null;
		String entityBody = null;
		
		if(fileExists){
			statusLine = "HTTP/1.0 200 OK"+CRLF;
			contentTypeLine = "Content-type: "+ contentType(fileName)+CRLF;
			
		}
		else{
			//the file does not exist, we compose an "not found" message
			statusLine = "HTTP/1.0 404 Not Found"+CRLF;
			contentTypeLine = "Content-type: text/html"+CRLF;
			entityBody ="<html>" +
						"<head><title>File Not Found<title><body>" +
						"<body>Not found!</body>" +
						"</html>";				
		}
		
		//sending into the socket is done simply with writing bytes into output buffer
		outToClient.writeBytes(statusLine);
		outToClient.writeBytes(contentTypeLine);
		outToClient.writeBytes(CRLF);
		
		if(fileExists){
			//method will go over the bytes of the file and write the into output buffer
			sendBytes(fis, outToClient);
			fis.close();
		}
		else{
			outToClient.writeBytes(entityBody);
		}
		
		//debugging output
		System.out.println(fileName);		
		//System.out.println("closing connection");
		System.out.println("------------------");
		
		
		//before closing the socket, we have to close buffers
		//so that they are unalocated by GC
		inFromClient.close();
		outToClient.close();*/
		socket.close();	

	}
	private void sendBytes(FileInputStream fis, DataOutputStream outToClient) throws Exception {
		byte[] buffer = new byte[1024];
		int bytes = 0;
		
		while((bytes = fis.read(buffer)) != -1)
			outToClient.write(buffer, 0, bytes);
		
	}
	
	//deciding of the content-type which should be written into header of the message
	//I implemented only some of them, css looked as needed, 
	//so that the pages will be well formated
	private String contentType(String fileName) {
		
		if(fileName.endsWith("htm") || fileName.endsWith("html")){
			return "text/html";
			}
		if(fileName.endsWith("css")){
			return "text/css";
			}		
		if(fileName.endsWith("jpeg") || fileName.endsWith("jpg")){
			return "image/jpeg";
			}		
		if(fileName.endsWith("gif")){
			return "image/gif";
		}	
		if(fileName.endsWith("png")){
			return "image/png";
		}	
		return "application/octet-stream";
	}

	
//	first part of the programming assignment	
//	simply showing the request message only	
//	private void processRequest() throws Exception
//	{
//		BufferedReader inFromClient =new BufferedReader(new InputStreamReader(socket.getInputStream()));
//		DataOutputStream outToClient = new DataOutputStream(socket.getOutputStream());
//		
//		String requestLine = inFromClient.readLine();
//		System.out.println();
//		System.out.println(requestLine);
//		
//		String headerLine = null;
//		while((headerLine = inFromClient.readLine()).length() != 0)
//		{
//			System.out.println(headerLine);
//		}
//		
//		System.out.println("closing connection");
//		System.out.println("------------------");
//		inFromClient.close();
//		outToClient.close();
//		socket.close();	
//
//	}
//	private static String bytes2String() throws IOException
//	{
//		StringBuffer str = new StringBuffer();
//		byte [] buffer = new byte [1024];
//		int read=0;
//        while((read=in.read(buffer))!= -1){
//        	str.append(new String(buffer, 0, read));
//     	}
//        return str.toString();
//	}
	public static void getKey() throws FileNotFoundException, IOException,	ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream(
				publicKeyFileName));
		publicKey = (PublicKey) ois.readObject();
		ois.close();
		
	}
}
