package eukleidian;

import java.util.ArrayList;
import java.util.List;

public class Test {
	
	
	
	public Test(int n) {
		super();
		this.n = n;
	}

	private int n;
	
	public Equation findInverse(int number)
	{
		if(number<0)
			number+=n;
		
		int k=1;
		int leftOperand=0;
		int l=1;
		int rightOperand=0;
		int remainder=0;
		/*if(number>n)
		{
			leftOperand=number;
			rightOperand=n;
			l=-number/n;
			remainder=number % n;
		}
		else
		{
			leftOperand=n;
			rightOperand=number;
			l=-n/number;
			remainder=n % number;
		}*/
		if(number>n)
		{
			rightOperand=number;
			leftOperand=n;
			k=-number/n;
			remainder=number % n;
		}
		else
		{
			rightOperand=n;
			leftOperand=number;
			k=-n/number;
			remainder=n % number;
		}
		
		List<Equation> equations = new ArrayList<Equation>();
		Equation eq1 = new Equation(k,leftOperand,l,rightOperand,remainder,leftOperand);
		
		if(eq1.getRemainder()==0)
			return eq1;
		
		/*remainder=eq1.getRightOperand() % eq1.getRemainder();
		leftOperand=eq1.getRightOperand();
		rightOperand=eq1.getRemainder();
		l=-leftOperand/rightOperand;
		k=1;
		
		k+=l*eq1.getL();
		l*=eq1.getK();*/
		
		remainder=eq1.getLeftOperand() % eq1.getRemainder();
		leftOperand=eq1.getLeftOperand();
		rightOperand=eq1.getRemainder();
		l=-leftOperand/rightOperand;
		k=1;
		
		k+=l*eq1.getK();
		l*=eq1.getL();
		
		
		Equation eq2 = new Equation(k,leftOperand,l,rightOperand,remainder, eq1.getRemainder());
		
		if(eq2.getRemainder()==0)
			return eq1;
		
		
		//Equation eq3 = new Equation(-rightOperand/leftOperand*eq1.getL()+1,rightOperand,-rightOperand/leftOperand*eq1.getK(),leftOperand,remainder);
		
		
		
		
		/*k=l;
		leftOperand=rightOperand;
		rightOperand=remainder;
		l=leftOperand/rightOperand*l+k;
		remainder=leftOperand % rightOperand;*/
		
		/*Equation eq2 = new Equation(leftOperand,k,rightOperand,remainder);
		eq2.setK(eq2.getK()*eq1.getK());
		
		
		leftOperand=rightOperand;
		rightOperand=remainder;
		k=leftOperand/rightOperand;
		remainder=leftOperand % rightOperand;
		
		equations.add(new Equation(leftOperand,k,rightOperand,remainder));
		
		equations.remove(0);*/
		return doEuclideanRecursively(eq1, eq2);
	}
	
	public Equation doEuclideanRecursively(Equation eq1, Equation eq2)
	{
		
		int remainder=eq2.getRightOperand1() % eq2.getRemainder();
		int leftOperand=eq2.getRightOperand1();
		int rightOperand=eq2.getRemainder();
		int l=-leftOperand/rightOperand;
		int k=1;
		k=k*eq1.getK()+l*eq2.getK();
		l=1*eq1.getL()+l*eq2.getL();
		//leftOperand=eq1.getLeftOperand();
		//rightOperand=eq1.getRightOperand();
		/*int rightOperand=0;
		int leftOperand=0;
		int k=0;
		int remainder=0;
		leftOperand=eq2.getRightOperand();
		rightOperand=eq2.getRemainder();
		k=eq2.getRightOperand()/eq2.getRemainder();
		remainder=leftOperand % rightOperand;
		if(remainder==0)
			return eq2;*/
		Equation actual = new Equation(k, leftOperand, l, rightOperand, remainder, eq2.getRemainder());
		eq1=eq2;
		eq2=actual;
		if(remainder!=0)
			doEuclideanRecursively(eq1, eq2);
		return eq2;
	}

}
